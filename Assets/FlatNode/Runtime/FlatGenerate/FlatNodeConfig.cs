// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatNode.Runtime.Flat
{

using global::System;
using global::FlatBuffers;

public struct NodeInputFieldInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NodeInputFieldInfo GetRootAsNodeInputFieldInfo(ByteBuffer _bb) { return GetRootAsNodeInputFieldInfo(_bb, new NodeInputFieldInfo()); }
  public static NodeInputFieldInfo GetRootAsNodeInputFieldInfo(ByteBuffer _bb, NodeInputFieldInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NodeInputFieldInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string FieldName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFieldNameBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetFieldNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFieldNameArray() { return __p.__vector_as_array<byte>(4); }
  public int TargetNodeId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TargetPortId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ValueTypeName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueTypeNameBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetValueTypeNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetValueTypeNameArray() { return __p.__vector_as_array<byte>(10); }
  public string ValueString { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueStringBytes() { return __p.__vector_as_span(12); }
#else
  public ArraySegment<byte>? GetValueStringBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetValueStringArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<NodeInputFieldInfo> CreateNodeInputFieldInfo(FlatBufferBuilder builder,
      StringOffset fieldNameOffset = default(StringOffset),
      int targetNodeId = 0,
      int targetPortId = 0,
      StringOffset valueTypeNameOffset = default(StringOffset),
      StringOffset valueStringOffset = default(StringOffset)) {
    builder.StartObject(5);
    NodeInputFieldInfo.AddValueString(builder, valueStringOffset);
    NodeInputFieldInfo.AddValueTypeName(builder, valueTypeNameOffset);
    NodeInputFieldInfo.AddTargetPortId(builder, targetPortId);
    NodeInputFieldInfo.AddTargetNodeId(builder, targetNodeId);
    NodeInputFieldInfo.AddFieldName(builder, fieldNameOffset);
    return NodeInputFieldInfo.EndNodeInputFieldInfo(builder);
  }

  public static void StartNodeInputFieldInfo(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddFieldName(FlatBufferBuilder builder, StringOffset fieldNameOffset) { builder.AddOffset(0, fieldNameOffset.Value, 0); }
  public static void AddTargetNodeId(FlatBufferBuilder builder, int targetNodeId) { builder.AddInt(1, targetNodeId, 0); }
  public static void AddTargetPortId(FlatBufferBuilder builder, int targetPortId) { builder.AddInt(2, targetPortId, 0); }
  public static void AddValueTypeName(FlatBufferBuilder builder, StringOffset valueTypeNameOffset) { builder.AddOffset(3, valueTypeNameOffset.Value, 0); }
  public static void AddValueString(FlatBufferBuilder builder, StringOffset valueStringOffset) { builder.AddOffset(4, valueStringOffset.Value, 0); }
  public static Offset<NodeInputFieldInfo> EndNodeInputFieldInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NodeInputFieldInfo>(o);
  }
};

public struct NodeFlowOutPortInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NodeFlowOutPortInfo GetRootAsNodeFlowOutPortInfo(ByteBuffer _bb) { return GetRootAsNodeFlowOutPortInfo(_bb, new NodeFlowOutPortInfo()); }
  public static NodeFlowOutPortInfo GetRootAsNodeFlowOutPortInfo(ByteBuffer _bb, NodeFlowOutPortInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NodeFlowOutPortInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TargetNodeIds(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TargetNodeIdsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetNodeIdsBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetTargetNodeIdsBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetTargetNodeIdsArray() { return __p.__vector_as_array<int>(4); }

  public static Offset<NodeFlowOutPortInfo> CreateNodeFlowOutPortInfo(FlatBufferBuilder builder,
      VectorOffset targetNodeIdsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    NodeFlowOutPortInfo.AddTargetNodeIds(builder, targetNodeIdsOffset);
    return NodeFlowOutPortInfo.EndNodeFlowOutPortInfo(builder);
  }

  public static void StartNodeFlowOutPortInfo(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddTargetNodeIds(FlatBufferBuilder builder, VectorOffset targetNodeIdsOffset) { builder.AddOffset(0, targetNodeIdsOffset.Value, 0); }
  public static VectorOffset CreateTargetNodeIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTargetNodeIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTargetNodeIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<NodeFlowOutPortInfo> EndNodeFlowOutPortInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NodeFlowOutPortInfo>(o);
  }
};

public struct NodeInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NodeInfo GetRootAsNodeInfo(ByteBuffer _bb) { return GetRootAsNodeInfo(_bb, new NodeInfo()); }
  public static NodeInfo GetRootAsNodeInfo(ByteBuffer _bb, NodeInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NodeInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int NodeId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string NodeClassTypeName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeClassTypeNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetNodeClassTypeNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNodeClassTypeNameArray() { return __p.__vector_as_array<byte>(6); }
  public NodeInputFieldInfo? InputPortInfos(int j) { int o = __p.__offset(8); return o != 0 ? (NodeInputFieldInfo?)(new NodeInputFieldInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int InputPortInfosLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public NodeFlowOutPortInfo? FlowOutPortInfos(int j) { int o = __p.__offset(10); return o != 0 ? (NodeFlowOutPortInfo?)(new NodeFlowOutPortInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FlowOutPortInfosLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int RightSideNodeIds(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RightSideNodeIdsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRightSideNodeIdsBytes() { return __p.__vector_as_span(12); }
#else
  public ArraySegment<byte>? GetRightSideNodeIdsBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetRightSideNodeIdsArray() { return __p.__vector_as_array<int>(12); }

  public static Offset<NodeInfo> CreateNodeInfo(FlatBufferBuilder builder,
      int nodeId = 0,
      StringOffset nodeClassTypeNameOffset = default(StringOffset),
      VectorOffset inputPortInfosOffset = default(VectorOffset),
      VectorOffset flowOutPortInfosOffset = default(VectorOffset),
      VectorOffset rightSideNodeIdsOffset = default(VectorOffset)) {
    builder.StartObject(5);
    NodeInfo.AddRightSideNodeIds(builder, rightSideNodeIdsOffset);
    NodeInfo.AddFlowOutPortInfos(builder, flowOutPortInfosOffset);
    NodeInfo.AddInputPortInfos(builder, inputPortInfosOffset);
    NodeInfo.AddNodeClassTypeName(builder, nodeClassTypeNameOffset);
    NodeInfo.AddNodeId(builder, nodeId);
    return NodeInfo.EndNodeInfo(builder);
  }

  public static void StartNodeInfo(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddNodeId(FlatBufferBuilder builder, int nodeId) { builder.AddInt(0, nodeId, 0); }
  public static void AddNodeClassTypeName(FlatBufferBuilder builder, StringOffset nodeClassTypeNameOffset) { builder.AddOffset(1, nodeClassTypeNameOffset.Value, 0); }
  public static void AddInputPortInfos(FlatBufferBuilder builder, VectorOffset inputPortInfosOffset) { builder.AddOffset(2, inputPortInfosOffset.Value, 0); }
  public static VectorOffset CreateInputPortInfosVector(FlatBufferBuilder builder, Offset<NodeInputFieldInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInputPortInfosVectorBlock(FlatBufferBuilder builder, Offset<NodeInputFieldInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInputPortInfosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFlowOutPortInfos(FlatBufferBuilder builder, VectorOffset flowOutPortInfosOffset) { builder.AddOffset(3, flowOutPortInfosOffset.Value, 0); }
  public static VectorOffset CreateFlowOutPortInfosVector(FlatBufferBuilder builder, Offset<NodeFlowOutPortInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFlowOutPortInfosVectorBlock(FlatBufferBuilder builder, Offset<NodeFlowOutPortInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFlowOutPortInfosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRightSideNodeIds(FlatBufferBuilder builder, VectorOffset rightSideNodeIdsOffset) { builder.AddOffset(4, rightSideNodeIdsOffset.Value, 0); }
  public static VectorOffset CreateRightSideNodeIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRightSideNodeIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRightSideNodeIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<NodeInfo> EndNodeInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NodeInfo>(o);
  }
};

public struct GraphVariableInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GraphVariableInfo GetRootAsGraphVariableInfo(ByteBuffer _bb) { return GetRootAsGraphVariableInfo(_bb, new GraphVariableInfo()); }
  public static GraphVariableInfo GetRootAsGraphVariableInfo(ByteBuffer _bb, GraphVariableInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GraphVariableInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TypeName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetTypeNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeNameArray() { return __p.__vector_as_array<byte>(6); }
  public string ValueString { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueStringBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetValueStringBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetValueStringArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<GraphVariableInfo> CreateGraphVariableInfo(FlatBufferBuilder builder,
      int id = 0,
      StringOffset typeNameOffset = default(StringOffset),
      StringOffset valueStringOffset = default(StringOffset)) {
    builder.StartObject(3);
    GraphVariableInfo.AddValueString(builder, valueStringOffset);
    GraphVariableInfo.AddTypeName(builder, typeNameOffset);
    GraphVariableInfo.AddId(builder, id);
    return GraphVariableInfo.EndGraphVariableInfo(builder);
  }

  public static void StartGraphVariableInfo(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTypeName(FlatBufferBuilder builder, StringOffset typeNameOffset) { builder.AddOffset(1, typeNameOffset.Value, 0); }
  public static void AddValueString(FlatBufferBuilder builder, StringOffset valueStringOffset) { builder.AddOffset(2, valueStringOffset.Value, 0); }
  public static Offset<GraphVariableInfo> EndGraphVariableInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GraphVariableInfo>(o);
  }
};

public struct GraphInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GraphInfo GetRootAsGraphInfo(ByteBuffer _bb) { return GetRootAsGraphInfo(_bb, new GraphInfo()); }
  public static GraphInfo GetRootAsGraphInfo(ByteBuffer _bb, GraphInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GraphInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int GraphId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public NodeInfo? Nodes(int j) { int o = __p.__offset(6); return o != 0 ? (NodeInfo?)(new NodeInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int NodesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int CommonNodeIds(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CommonNodeIdsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommonNodeIdsBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetCommonNodeIdsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetCommonNodeIdsArray() { return __p.__vector_as_array<int>(8); }
  public int EntranceNodeIds(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EntranceNodeIdsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEntranceNodeIdsBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetEntranceNodeIdsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetEntranceNodeIdsArray() { return __p.__vector_as_array<int>(10); }
  public GraphVariableInfo? GraphVariableInfos(int j) { int o = __p.__offset(12); return o != 0 ? (GraphVariableInfo?)(new GraphVariableInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int GraphVariableInfosLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GraphInfo> CreateGraphInfo(FlatBufferBuilder builder,
      int graphId = 0,
      VectorOffset nodesOffset = default(VectorOffset),
      VectorOffset commonNodeIdsOffset = default(VectorOffset),
      VectorOffset entranceNodeIdsOffset = default(VectorOffset),
      VectorOffset graphVariableInfosOffset = default(VectorOffset)) {
    builder.StartObject(5);
    GraphInfo.AddGraphVariableInfos(builder, graphVariableInfosOffset);
    GraphInfo.AddEntranceNodeIds(builder, entranceNodeIdsOffset);
    GraphInfo.AddCommonNodeIds(builder, commonNodeIdsOffset);
    GraphInfo.AddNodes(builder, nodesOffset);
    GraphInfo.AddGraphId(builder, graphId);
    return GraphInfo.EndGraphInfo(builder);
  }

  public static void StartGraphInfo(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddGraphId(FlatBufferBuilder builder, int graphId) { builder.AddInt(0, graphId, 0); }
  public static void AddNodes(FlatBufferBuilder builder, VectorOffset nodesOffset) { builder.AddOffset(1, nodesOffset.Value, 0); }
  public static VectorOffset CreateNodesVector(FlatBufferBuilder builder, Offset<NodeInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNodesVectorBlock(FlatBufferBuilder builder, Offset<NodeInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNodesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCommonNodeIds(FlatBufferBuilder builder, VectorOffset commonNodeIdsOffset) { builder.AddOffset(2, commonNodeIdsOffset.Value, 0); }
  public static VectorOffset CreateCommonNodeIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCommonNodeIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCommonNodeIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEntranceNodeIds(FlatBufferBuilder builder, VectorOffset entranceNodeIdsOffset) { builder.AddOffset(3, entranceNodeIdsOffset.Value, 0); }
  public static VectorOffset CreateEntranceNodeIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEntranceNodeIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEntranceNodeIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGraphVariableInfos(FlatBufferBuilder builder, VectorOffset graphVariableInfosOffset) { builder.AddOffset(4, graphVariableInfosOffset.Value, 0); }
  public static VectorOffset CreateGraphVariableInfosVector(FlatBufferBuilder builder, Offset<GraphVariableInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGraphVariableInfosVectorBlock(FlatBufferBuilder builder, Offset<GraphVariableInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartGraphVariableInfosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GraphInfo> EndGraphInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GraphInfo>(o);
  }
};


}
